# 1 "reacteur.pml"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "reacteur.pml"







chan STDIN
chan in_capteur[4] = [5] of { int };
chan out_capteur[4] = [5] of { int };
chan out_collect[5] = [1] of { int };
chan in_collect[5] = [0] of { int };

typedef testArray {
 int valeur[4 * 5]
}
testArray test[5];
int test01[4 * 5] = { 400, 450, 460, 460, 400, 460, 460, 460, 460, 460, 460, 400, 460, 460, 460, 460, 460, 460, 460, 460 };
int test02[4 * 5] = { 400, 400, 420, 430, 400, 450, 420, 430, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400 };
int test03[4 * 5] = { 100, 100, 100, 100, 100, 100, 100, 110, 100, 100, 100, 100, 110, 100, 100, 100, 100, 100, 100, 100 };
int test04[4 * 5] = { 400, 400, 390, 400, 400, 250, 400, 400, 300, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400 };
int test05[4 * 5] = { 400, 400, 390, 400, 400, 250, 400, 400, 300, 400, 350, 370, 400, 400, 400, 400, 400, 400, 400, 400 };
 int numTest = 0;


active proctype lanceur() {

 int i;
 for (i: 0..(4 * 5 - 1)) {
  test[0].valeur[i] = test01[i];
  test[1].valeur[i] = test02[i];
  test[2].valeur[i] = test03[i];
  test[3].valeur[i] = test04[i];
  test[4].valeur[i] = test05[i];
 }
 for (i: 0 .. 4 - 1) {
  run Capteur(i)
 };
 for (i: 0 .. 5 - 1) {
  run Collecteur(i)
 };
 run Simulateur()
}

proctype Simulateur() {

 int c;

 do
  :: STDIN ? c ->
   if
   :: c == 4 -> break
   :: (c == 49 || c == 50 || c == 51 || c == 52 || c == 53) ->
    numTest = c - 49;
    run Controleur()
   :: else -> printf("Illegal %d \n", c)
   fi
 od
}

proctype Controleur() {

 int i;
 int retourCollecteur[5];
 int nbTNormale;
 int nbDefail;
 int nbAlarm;
 for (i: 0 .. 5 - 1) {
  in_collect[i] ! 0
 };
 for (i: 0 .. 5 - 1) {
  out_collect[i] ? retourCollecteur[i]
 };
 for (i: 0 .. 5 - 1) {
  if
   :: (retourCollecteur[i] == 0) ->
    printf("Controleur reçu ALARME_TEMPERATURE du collecteur %d\n", i)
   :: (retourCollecteur[i] == 1) ->
    printf("Controleur reçu TEMPERATURE_NORMALE du collecteur %d\n", i)
   :: (retourCollecteur[i] == 2) ->
    printf("Controleur reçu DEFAILLANCE_CAPTEURS du collecteur %d\n", i)
  fi
 };
 nbTNormale = 0; nbDefail = 0; nbAlarm = 0;
 for (i: 0 .. 5 - 1) {
  if
   :: (retourCollecteur[i] == 0) -> nbAlarm++
   :: (retourCollecteur[i] == 1) -> nbTNormale++
   :: (retourCollecteur[i] == 2) -> nbDefail++
  fi
 };
 if
  :: ( nbAlarm > 0 ) -> printf("Baisse les barres, voyant rouge")
  :: ( nbDefail == 5) -> printf("Baisse les barres, voyant rouge clignotant")
  :: ( nbDefail == 5 - 1 && nbTNormale == 1) -> printf("Baisse les barres, voyant orange")
  :: ( nbDefail < 5 - 1 && nbTNormale > 1 && nbTNormale != 5) ->
   printf("voyant orange")
  :: ( nbTNormale == 5) -> printf("voyant vert")
  :: else -> printf("cas non pris en compte, nbDefail = %d ;; nbAlarm = %d ;; nbTNormale = %d \n", nbDefail, nbAlarm, nbTNormale)
 fi
}

proctype Collecteur(int numCollecteur) {

 int i;
 int valeur[4];
 int valeursDifferentes[2] = { 0, 0};
 int nbValeurs[2] = {0, 0};
 int valeurCommune = 0;
 bool dejaVuDeuxiemeValeur = false;
 bool troisCapteursIdentiques = false;

 do
  :: in_collect[numCollecteur] ? _ ->
   printf("Collecteur %d reçu signal\n", numCollecteur);
   for (i: 0 .. 4 - 1) {
    in_capteur[i] ! 0
   };
   for (i: 0 .. 4 - 1) {
    out_capteur[i] ? valeur[i]
   };
   for (i: 0 .. 4 - 1) {
    printf("Collecteur %d reçu valeur %d du capteur %d\n", numCollecteur, valeur[i], i)
   };
   valeursDifferentes[0] = valeur[0];
   valeursDifferentes[1] = 0;
   nbValeurs[0] = 1; nbValeurs[1] = 0;
   dejaVuDeuxiemeValeur = false;
   troisCapteursIdentiques = false;
   for (i: 1..(4 - 1)) {
    if
     :: ( valeur[i] == valeursDifferentes[0] ) ->
      nbValeurs[0] = nbValeurs[0] + 1
     :: ( dejaVuDeuxiemeValeur && valeur[i] == valeursDifferentes[1]) ->
      nbValeurs[1] = nbValeurs[1] + 1
     :: ( !dejaVuDeuxiemeValeur && valeur[i] != valeursDifferentes[0]) ->
      valeursDifferentes[1] = valeur[i];
      nbValeurs[1] = nbValeurs[1] + 1;
      dejaVuDeuxiemeValeur = true
     :: else -> skip
    fi
   };
   if
    :: (nbValeurs[0] > 4 - 2) ->
     valeurCommune = valeursDifferentes[0];
     troisCapteursIdentiques = true
    :: (nbValeurs[1] > 4 - 2) ->
     valeurCommune = valeursDifferentes[1];
     troisCapteursIdentiques = true
    :: else -> troisCapteursIdentiques = false
   fi;
   if
    :: (troisCapteursIdentiques) ->
     if
      :: (valeurCommune < 450) ->
       out_collect[numCollecteur] ! 1
      :: else -> out_collect[numCollecteur] ! 0
     fi;
    :: else ->
     out_collect[numCollecteur] ! 2
   fi
 od
}

proctype Capteur(int numCapteur) {

 int cpt = 0;
 int valeur = 0;
 do
  :: in_capteur[numCapteur] ? _ ->
   cpt = ((cpt+1) % 5);
   valeur = test[numTest].valeur[5*numCapteur + cpt];
   out_capteur[numCapteur] ! valeur
 od
}
